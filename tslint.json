/*
* TODO: how to apply semicolon
* such like no semi below,
* import { method } from 'node';
*
* it("test",()=>{
*   expect(3).toBe(3)
* });
*/
{
  "extends": [
    "tslint-eslint-rules",
    "tslint:latest",
    "tslint-react"
  ],
  "rulesDirectory": [
    "./node_modules/tslint-consistent-codestyle/rules",
    "./node_modules/vrsource-tslint-rules/rules"
  ],
  "rules": {
    "quotemark": [
      true,
      "single",
      "jsx-double",
      "avoid-escape"
    ],
    "semicolon": [
      true,
      "always"
    ],
    /* vrsource-tslint-rules */
    "no-duplicate-imports": true,
    "prefer-literal": [
      true,
      "object",
      "function",
      "array"
    ],
    "dot-notation": [
      true,
      {
        "allow-pattern": "^[a-z]+(_[a-z]+)+$"
      }
    ],
    /* tslint-consistent-codestyle */
    "parameter-properties": [
      true,
      "all-or-none", // forces all or none of a constructors parameters to be parameter properties
      "leading", // forces parameter properties to precede regular parameters
      "member-access" // forces an access modifier for every parameter property
    ],
    "no-collapsible-if": true,
    "no-else-after-return": true,
    "no-unnecessary-else": true,
    "no-var-before-return": true,
    "object-shorthand-properties-first": true,
    "naming-convention": [
      true,
      // forbid leading and trailing underscores and enforce camelCase on EVERY name. will be overridden by subtypes if needed
      {
        "type": "default",
        "format": "camelCase",
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      // require all global constants to be camelCase or UPPER_CASE
      // all other variables and functions still need to be camelCase
      {
        "type": "variable",
        "modifiers": [
          "global",
          "const"
        ],
        "format": [
          "camelCase",
          "UPPER_CASE"
        ]
      },
      // override the above format option for exported constants to allow only UPPER_CASE
      {
        "type": "variable",
        "modifiers": [
          "export",
          "const"
        ],
        "format": "UPPER_CASE"
      },
      // allow leading underscores for parameters, because `tsc --noUnusedParameters` will not flag underscore prefixed parameters
      // all other rules (trailingUnderscore: forbid, format: camelCase) still apply
      // since we don't want to inherit this config to `parameterProperties`, we set `final = true`
      {
        "type": "parameter",
        "leadingUnderscore": "allow",
        "final": true
      },
      // require leading underscores for private properties and methods, all other rules still apply
      {
        "type": "member",
        "modifiers": "private",
        "leadingUnderscore": "require"
      },
      // same for protected
      {
        "type": "member",
        "modifiers": "protected",
        "leadingUnderscore": "require"
      },
      // exclicitly disable the format check only for method toJSON
      {
        "type": "method",
        "filter": "^toJSON$",
        "format": null
      },
      // enforce UPPER_CASE for all public static readonly(!) properties
      {
        "type": "property",
        "modifiers": [
          "public",
          "static",
          "const"
        ],
        "format": "UPPER_CASE"
      },
      // enforce PascalCase for classes, interfaces, enums, etc. Remember, there are still no underscores allowed.
      {
        "type": "type",
        "format": "PascalCase"
      },
      // abstract classes must have the prefix "Abstract". The following part of the name must be valid PascalCase
      {
        "type": "class",
        "modifiers": "abstract",
        "prefix": "Abstract"
      },
      // interface names must start with "I". The following part of the name must be valid PascalCase
      {
        "type": "interface",
        "prefix": "I"
      },
      // generic type parameters must start with "T"
      // most of the time it will only be T, which is totally valid, because an empty string conforms to the PascalCase check
      // By convention T, U and V are used for generics. You could enforce that with "regex": "^[TUV]$" and if you are care that much for performance, you could disable every other check by setting a falsy value
      {
        "type": "genericTypeParameter",
        "regex": "^[TUKVPS]$"
      },
      // enum members must be in PascalCase. Without this config, enumMember would inherit UPPER_CASE from public static const property
      {
        "type": "enumMember",
        "format": "PascalCase"
      }
    ]
  }
}